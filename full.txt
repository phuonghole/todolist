npm init -y
npx create-react-app client
cd client
npm i react-router-dom axios sass
npm start
package.json 

"scripts": {
"client": "cd client && npm start",
},
src ->
    api 
    component
    App.js 
    GlobalState.jsx
    index.js
    index.scss

index.js 

import React from 'react';
import ReactDOM from 'react-dom';
import './index.scss';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

app.js 

import React from "react";
import Header from "./components/header/Header";
import Page from "./components/mainpage/Page";
import { DataProvider } from "./GlobalState.jsx";
import { BrowserRouter, } from "react-router-dom";
const App = () => {
  return (
    <BrowserRouter>
      <DataProvider>
        <Header />
        <Page />
      </DataProvider>
    </BrowserRouter>
  );
};

export default App;

import React, { createContext, useState, useEffect } from "react";
import UserApi from "./api/UserApi";
export const GlobalState = createContext();

export const DataProvider = ({ children }) => {
  const [token, setToken] = useState(false);
  const state = {
    token: token,
    UserApi: UserApi(token),
  };
  return <GlobalState.Provider value={state}>{children}</GlobalState.Provider>;
};


import { useState, useEffect } from "react";
const UserApi = (token) => {
  const [isLogged, setIsLogged] = useState(false);
  useEffect(() => {
    if (token) {
      const getUser = async () => {
        try {
          setIsLogged(true);
        } catch (err) {
          alert(err.response.data.msg);
        }
      };
      getUser();
    }
  }, [token]);
  return {
    isLogged: [isLogged, setIsLogged],
  };
};

export default UserApi;

import React from "react";
import { Routes, Route } from "react-router-dom";
import Login from "./auth/Login";
import Register from "./auth/Register";
import NotFound from "./utils/NotFound";
import Notes from "./notes/Notes";
import { useContext } from "react";
import { GlobalState } from "../../GlobalState";
import CreateNote from "./notes/CreateNote";
import EditNote from "./notes/EditNote";
const Page = () => {
  const state = useContext(GlobalState);
  const [isLogged] = state.UserApi.isLogged;
  return (
    <Routes>
      <Route path="/" element={<Notes />} />
      <Route path="/create" element={<CreateNote />} />
      <Route path="/edit/:id" element={<EditNote />} />
      <Route path="/login" element={isLogged ? <NotFound /> : <Login />} />
      <Route
        path="/register"
        element={isLogged ? <NotFound /> : <Register />}
      />
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
};

export default Page;

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
body {
  line-height: 1.5;
  overflow-x: hidden;
  width: 100%;
  min-height: 100vh;
  color: whitesmoke;
}
.App {
  max-width: 75%;
  margin: 0 auto;
  min-height: 100vh;
  padding: 0 20px;
  box-shadow: 0 0 30px #eee;
}
a {
  text-decoration: none;
}
ul {
  list-style-type: none;
}
button {
  border: none;
  outline: none;
  background: transparent;
  cursor: pointer;
}
@import url("./components/header/header.scss");

@import url("./components/mainpage/auth/auth.scss");

@import url("./components/mainpage/notes/createNote.scss");

@import url("./components/mainpage/notes/note.scss");

import { useContext, useState } from "react";
import { GlobalState } from "../../GlobalState";
import Menu from "./icon/menu.svg";
import Close from "./icon/close.svg";
import { Link } from "react-router-dom";
const Header = () => {
  const state = useContext(GlobalState);
  const [isLogged] = state.UserApi.isLogged;
  const [token,setToken]=state.token;
  const loggerRouter = () => {
    return (
      <>
        <li>
          <Link to="/create">Create</Link>
        </li>
        <li>
          <Link to="/" onClick={logout}>
            Logout
          </Link>
        </li>
      </>
    );
  };
  const logout = async () => {
    window.localStorage.clear();
    window.location = "/";
    setToken(false)
  };
  const [menu, setMenu] = useState(false);
  const styleMenu = {
    left: menu ? "0" : "-100%",
  };
  return (
    <header>
      <div className="menu" onClick={() => setMenu(!menu)}>
        <img src={Menu} alt="" width="30" />
      </div>
      <div className="logo">
        <h1>
          <Link to="/">Notes</Link>
        </h1>
      </div>
      <ul style={styleMenu}>
        {isLogged ? (
          loggerRouter()
        ) : (
          <li>
            <Link to="/login">Login & Register</Link>
          </li>
        )}

        <li onClick={() => setMenu(!menu)}>
          <img src={Close} alt="" width="30" className="menu" />
        </li>
      </ul>
    </header>
  );
};

export default Header;

header {
  min-height: 70px;
  width: 100%;
  overflow: hidden;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid #ccc;
  .menu {
    display: none;
  }
  .logo {
    flex: 1;
  }
  a {
    text-transform: uppercase;
    color: #555;
  }
  ul {
    display: flex;
  }
  li {
    opacity: 0.7;
    padding: 0 10px;
  }
  li :hover {
    opacity: 1;
  }
}

@media (max-width: 768px) {
  header {
    justify-content: space-between;
    ul {
      position: fixed;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100vh;
      background-color: white;
      align-items: center;
      flex-direction: column;
      justify-content: space-around;
      opacity: 0.98;
      z-index: 3;
      transition: all ease 0.5s;
    }
    .menu {
      display: block;
      cursor: pointer;
    }
    .logo {
      flex: none;
    }
  }
}

import { useState } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
const Login = () => {
  const [user, setUser] = useState({
    email: "",
    password: "",
  });
   const [token,setToken]=state.token;
  const onChangeInput = (e) => {
    const { name, value } = e.target;
    setUser({ ...user, [name]: value });
  };
  const loginSubmit = async (e) => {
    e.preventDefault(); // xoa quay tron
    try {
      setToken(true)
      localStorage.setItem("firstLogin", true);
      window.location.href="/"
    } catch (error) {
      alert(error.response.data.msg);
    }
  };
  return (
    //    .user>form>h2+input*2+.user__btn>button+Link
    <div className="user">
      <form onSubmit={loginSubmit}>
        <h2>Login</h2>
        <input
          type="email"
          name="email"
          value={user.email}
          onChange={onChangeInput}
          placeholder='Email'
        />
        <input
          type="password"
          name="password"
          autoComplete="on"
          value={user.password}
          onChange={onChangeInput}
          placeholder='Password'
        />
        <div className="user__btn">
          <button>Login</button>
          <Link to="/register">Register</Link>
        </div>
      </form>
    </div>
  );
};

export default Login;

import { useState } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
const Register = () => {
  const [user, setUser] = useState({
    username: "",
    email: "",
    password: "",
  });
  const onChangeInput = (e) => {
    const { name, value } = e.target;
    setUser({ ...user, [name]: value });
  };
  const registerSubmit = async (e) => {
    e.preventDefault(); // xoa quay tron
    try {
      await axios.post("/users/register", { ...user });
      localStorage.setItem("firstLogin", true);
      window.location.href = "/";
    } catch (error) {
      alert(error.response.data.msg);
    }
  };
  return (
    //    .user>form>h2+input*2+.user__btn>button+Link
    <div className="user">
      <form onSubmit={registerSubmit}>
        <h2>Register</h2>
        <input
          type="name"
          name="username"
          value={user.username}
          onChange={onChangeInput}
          placeholder="Name"
        />
        <input
          type="email"
          name="email"
          value={user.email}
          onChange={onChangeInput}
          placeholder="Email"
        />
        <input
          type="password"
          name="password"
          autoComplete="on"
          value={user.password}
          onChange={onChangeInput}
          placeholder="Password"
        />
        <div className="user__btn">
          <button>Register</button>
          <Link to="/login">Login</Link>
        </div>
      </form>
    </div>
  );
};

export default Register;

.user {
  max-width: 500px;
  margin: 50px auto;
  border: 3px solid rgb(3, 165, 206);
  padding: 40px;
  border-radius: 5px;
  form {
    h2 {
      text-transform: uppercase;
      color: #555;
    }
    input,
    button {
      width: 100%;
      height: 40px;
      margin: 10px 0;
      outline: 3px solid rgb(3, 165, 206);
      border: 3px solid rgb(3, 165, 206);
      padding: 0 5px;
    }
    .user__btn {
      display: flex;
      align-items: center;
      justify-content: space-between;
      text-transform: uppercase;
    }
    button {
      flex: 2;
      background-color: rgb(3, 165, 206);
      color: white;
      text-transform: uppercase;
    }
    a {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      color: orangered;
    }
  }
}
import { useState, useEffect } from "react";
import axios from "axios";
const NoteApi = (token) => {
  const [notes, setNotes] = useState([]);
  const [callback,setCallback]=useState(false)
  useEffect(() => {
    if (token) {
      const getNotes = async () => {
            const res ={ 
          data:[
          {
            _id: "6210fd3d79e7195570e7be1e",
            title: "vasassdvsca",
            content: "asvsavss",
            date: "2ngay",
            user_id: "6210af214ef9f0f3b1686be2",
            __v: 0
          },
          {
            _id: "6210fd3d79e7195570e7be2e",
            title: "vasassdvsca2",
            content: "asvsavss",
            date: "2ngay",
            user_id: "6210af214ef9f0f3b1686be2",
            __v: 0
          }
        ]}
        setNotes(res.data);
      };
      getNotes();
    }
  }, [token]);
  return {
    notes: [notes, setNotes],
    callback:[callback,setCallback]
  };
};

export default NoteApi;


import NoteApi from "./api/NoteApi";
NoteApi: NoteApi(token),


import { useContext, useState } from "react";
import { GlobalState } from "../../../GlobalState";
import axios from "axios";
import { useNavigate } from "react-router-dom";
const CreateNote = () => {
  const data = {
    title: "",
    content: "",
    date: "",
  };
  const [note, setNote] = useState(data);
  const onChangeInput = (e) => {
    const { name, value } = e.target;
    setNote({ ...note, [name]: value });
  };
  const history = useNavigate();
  const state = useContext(GlobalState);
  const token = state.token;
  const createNote = async (e) => {
    e.preventDefault();
    try {
      const { title, content, date } = note;
      await axios.post(
        "/notes",
        { title, content, date },
        {
          headers: { Authorization: token },
        }
      );
      return history.push("/");
    } catch (error) {
      window.location.href = "/";
    }
  };
  return (
    <div className="create__note">
      <h2>Create note</h2>
      <form onSubmit={createNote}>
        <label className="note__row">
          <p>Title</p>
          <input
            type="text"
            value={note.title}
            name="title"
            onChange={onChangeInput}
          />
        </label>
        <label className="note__row">
          <p>Content</p>
          <textarea
            value={note.content}
            name="content"
            onChange={onChangeInput}
          ></textarea>
        </label>
        <label className="note__row">
          <p>Date</p>
          <input
            type="date"
            value={note.date}
            name="date"
            onChange={onChangeInput}
          />
        </label>
        <button>Save</button>
      </form>
    </div>
  );
};

export default CreateNote;

.create__note {
    max-width: 500px;
    margin: auto;
    width: 100%;
    border: 10px solid #ccc;
    padding: 20px;
    margin-top: 20px;
    h2 {
        text-transform: uppercase;
    }
    form {
        .note__row {
            width: 100%;
            margin: 10px 0;
            input,
            button,
            textarea {
                width: 100%;
                height: 40px;
                padding: 3px 5px;
            }
            textarea {
                resize: none;
                min-height: 60px;
            }
        }
        button {
            cursor: pointer;
            text-transform: uppercase;
            font-weight: 900;
            color: rgb(150, 173, 223);
            width: 100%;
            height: 40px;
            padding: 0 5px;
            margin-top: 10px;
            border: 3px solid rgb(3, 165, 206);
        }
    }
}
import { useContext } from "react";
import { GlobalState } from "../../../GlobalState";
import { Link } from "react-router-dom";
import { format } from 'timeago.js'
import axios from "axios";
const Notes = () => {
  const state = useContext(GlobalState);

  const [notes] = state.NoteApi.notes;
  const token = state.token
  const [callback,setCallback] = state.NoteApi.callback
  const deleteNote = async (id) => {
    try {
      await axios.delete(`notes/${id}`, {
        headers: { Authorization: token }
      })
      setCallback(!callback)
    } catch (error) {
      window.location.href = "/";
    }
  }
  return (
    <div className="notes">
      {notes.map((note) => (
        <div className="note__item" key={note._id}>
          <h4>{note.title}</h4>
          <div className="note__content">
            <p>{note.content}</p>
          </div>
          <p className="note__date">{format(note.date)}</p>
          <div className="note__edit">
            <Link to={`edit/${note._id}`} >Edit</Link>
          </div>
          <button className="note__delete" onClick={() => deleteNote(note._id)} >X</button>
        </div>
      ))}
    </div>
  );
};

export default Notes;
.notes {
    max-width: 1920px;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    margin: auto;
    .note__item {
        width: 300px;
        box-shadow: 0 0 5px rgb(7, 25, 63);
        background: rgb(7, 25, 63);
        padding: 10px;
        position: relative;
        color: #ddd;
        margin: 15px;
        h4 {
            margin-right: 10px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        .note__content{
            width: 100%;
            height: 150px;
            overflow: hidden;
            margin: 10px 0;
            color: #fff9;
        }
        .note__date{
            text-align: right;
            color: wheat;
        }
        .note__delete {
            cursor: pointer;
            position: absolute;
            top: 0;
            right: 10px;
            font-weight: 900;
            cursor: pointer;
            background: transparent;
            border: none;
            outline: none;
            color: white;
        }
    }
}
import { useContext, useState, useEffect } from "react";
import { GlobalState } from "../../../GlobalState";
import axios from "axios";
import { useNavigate,useParams } from "react-router-dom";
const EditNote = () => {
  const data = {
    title: "",
    content: "",
    date: "",
    id: '',
  };
  const [note, setNote] = useState(data);
  const onChangeInput = (e) => {
    const { name, value } = e.target;
    setNote({ ...note, [name]: value });
  };
  const history = useNavigate();
  const state = useContext(GlobalState);
  const token = state.token;
  const param = useParams();
  useEffect(() => {
    const getNote = async () => {
      if (param.id) {
        const res = await axios.get(`/notes/${param.id}`, {
          headers: { Authorization: token }
        })
        setNote({
          title: res.data.title,
          content: res.data.content,
          date: new Date(res.data.date).toLocaleDateString(),
          id: res.data._id
        })
      }
    }
    getNote()
  }, [param.id,token])
  const editSubmit = async (e) => {
    e.preventDefault();
    try {
      const { title, content, date, id } = note;
      await axios.put(
        `/notes/${id}`,
        { title, content, date },
        {
          headers: { Authorization: token },
        }
      );
      return history.push("/");
    } catch (error) {
      window.location.href = "/";
    }
  };
  return (
    <div className="create__note">
      <h2>Create note</h2>
      <form onSubmit={editSubmit}>
        <label className="note__row">
          <p>Title</p>
          <input
            type="text"
            value={note.title}
            name="title"
            onChange={onChangeInput}
          />
        </label>
        <label className="note__row">
          <p>Content</p>
          <textarea
            value={note.content}
            name="content"
            onChange={onChangeInput}
          ></textarea>
        </label>
        <label className="note__row">
          <p>Date</p>
          <input
            type="date"
            value={note.date}
            name="date"
            onChange={onChangeInput}
          />
        </label>
        <button>Save</button>
      </form>
    </div>
  );
};

export default EditNote;

npm i bcrypt concurrently cookie-parser cors dotenv express jsonwebtoken mongoose colors nodemon timeago.js

"scripts": {
"client": "cd client && npm start",
"server": "nodemon server.js --ignore client",
},

server.js
controllers-userCtrl.js+noteCtrl.js
middleware -auth.js
models -userModel.js+noteModel.js
routers -userRouter.js+noteRouter.js


server.js
app.mvc
const cors = require('cors')
app.use(cors())
app.use(express.json())
const cookies = require("cookie-parser");
app.use(cookies());
app.connect

.env
POST=5000
URI=mongodb://localhost:27017/todolist

userModel.js
!mdbgum 
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    username:{
        type:String,
        required:true,
        trim:true,
    },
    email:{
        type:String,
        required:true,
        unique:true,
    },
    password:{
        type:String,
        required:true,
    },
});
module.exports = mongoose.model('User', userSchema);

userRouter.js 

app.router


server.js
const userRouter = require('./routes/userRouter')
app.use("/users", userRouter);

userRouter.js
const router = require("express").Router();
const userCtrl = require("../controllers/userCtrl");

router.post("/register", userCtrl.register);
router.post("/login", userCtrl.login);
router.get("/logout", userCtrl.logout);
router.get("/refresh_token", userCtrl.refresh_token);
module.exports = router;

const Users = require("../models/userModel");
const userCtrl = {
  register: (req, res) => {
    try {
      res.json("test");
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  login: (req, res) => {
    try {
      res.json("test");
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  logout: (req, res) => {
    try {
      res.json("test");
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  refresh_token: (req, res) => {
    try {
      res.json("test");
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
};

const Users = require("../models/userModel");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const userCtrl = {
  register: async (req, res) => {
    try {
      // res.json(req.body)
      const { username, email, password } = req.body;
      const user = await Users.findOne({ email });
      if (user)
        return res.status(400).json({ msg: "The email already exists" });
      if (password.length < 6)
        return res.status(400).json({ msg: "password is at the 6 char" });
      const passwordHash = await bcrypt.hash(password, 10);
      const newUser = await Users({ username, email, password: passwordHash });
      //   res.json({ newUser });
      await newUser.save();
      const accesstoken = createAccessToken({ id: newUser._id });
      // res.json({ accesstoken });
      const refreshtoken = createRefreshToken({ id: newUser._id });
      res.cookie("refreshtoken", refreshtoken, {
        httpOnly: true,
        path: "/users/refresh_token",
      });
      res.json({ refreshtoken });
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  refreshToken: (req, res) => {
    try {
      const rf_token = req.cookies.refreshtoken;
      //   chưa đăng nhập hoặc đăng kí
      if (!rf_token)
        return res.status(400).json({ msg: "Please Login or Register" });
      jwt.verify(rf_token, process.env.REFRESH, (err, user) => {
        if (err)
          return res.status(400).json({ msg: "Please Login or Register" });
        const accesstoken = createAccessToken({ id: user.id });
        res.json({ accesstoken });
      });
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  login: async (req, res) => {
    try {
      const { email, password } = req.body;
      const user = await Users.findOne({ email });
      if (!user) return res.status(400).json({ msg: "User does not exists" });
      const isWatch = await bcrypt.compare(password, user.password);
      if (!isWatch) return res.status(400).json({ msg: "incorrect password" });
      const accesstoken = createAccessToken({ id: user._id });
      // res.json({ accesstoken });
      const refreshtoken = createRefreshToken({ id: user._id });
      res.cookie("refreshtoken", refreshtoken, {
        httpOnly: true,
        path: "/users/refresh_token",
      });
      res.json({ refreshtoken });
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  logout: async (req, res) => {
    try {
      res.clearCookie("refreshtoken", { path: "/users/refresh_token" });
      return res.status(400).json({ msg: "Logout" });
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
};
const createAccessToken = (user) => {
  return jwt.sign(user, process.env.ACCESS, { expiresIn: "1d" });
};
const createRefreshToken = (user) => {
  return jwt.sign(user, process.env.REFRESH, { expiresIn: "7d" });
};
module.exports = userCtrl;

POST=5000
URI=mongodb://localhost:27017/todolist
ACCESS =v
REFRESH =a

const jwt = require("jsonwebtoken");
const auth = (req, res, next) => {
  try {
    const token = req.header("Authorization");
    if (!token) return res.status(400).json({ msg: "Invalid Authorization" });
    jwt.verify(token, process.env.ACCESS, (err, user) => {
      if (err) return res.status(400).json({ msg: "Invalid Authorization" });
      req.user = user;
      next();
    });
  } catch (error) {
    return res.status(500).json({ msg: error.message });
  }
};
module.exports = auth;


const mongoose = require('mongoose');
const noteSchema = new mongoose.Schema({
    title:{
        type:String,
        required:true,
    },
    content:{
        type:String,
        required:true,
    },
    date:{
        type:Date,
        default:Date.now,
    },
    user_id:{
        type:String,
        required:true,
    },
});

module.exports = mongoose.model('Notes', noteSchema);

const router = require('express').Router()
const auth = require('../middleware/auth')
const noteCtrl = require('../controllers/noteCtrl')

router.route('/')
    .get(auth, noteCtrl.getNotes)
    .post(auth, noteCtrl.createNote)

router.route('/:id')
    .get(auth, noteCtrl.getNote)
    .put(auth, noteCtrl.updateNote)
    .delete(auth, noteCtrl.deleteNote)


module.exports = router

const noteRouter = require("./routers/noteRouter");
app.use("/notes", noteRouter);

const Notes = require("../models/noteModel");
const Users = require("../models/userModel");
const noteCtrl = {
  getNotes: async (req, res) => {
    try {
      const notes = await Notes.find({ user_id: req.user.id});
      res.json(notes);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  createNote: async (req, res) => {
    try {
      const { title, content, date } = req.body;
      const newNote = new Notes({
        title,
        content,
        date,
        user_id: req.user.id,
      });
      await newNote.save();
      res.json({ msg: "Created a Note" });
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  getNote: async (req, res) => {
    try {
      const note = await Notes.findById(req.params.id);
      res.json(note);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  updateNote: async (req, res) => {
    try {
      const { title, content, date } = req.body;
      await Notes.findOneAndUpdate(
        { _id: req.params.id },
        {
          title,
          content,
          date,
        }
      );
      res.json({ msg: "Updated a Note" });
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
  deleteNote: async (req, res) => {
    try {
      await Notes.findByIdAndDelete(req.params.id);
      res.json({ msg: "Deleted a Note" });
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  },
};
module.exports = noteCtrl;

NoteApi.jsx
const res = await axios.get("/notes", {
  headers: { Authorization: token },
});


Header.jsx 
await axios.get("/user/logout");

Login.jsx 
await axios.post("/users/login", { ...user });

Register.jsx 
await axios.post("/users/register", { ...user });

CreateNote.jsx
await axios.post(
  "/notes",
  { title, content, date },
  {
    headers: { Authorization: token },
  }
);

Notes.jsx
 await axios.delete(`notes/${id}`, {
        headers: { Authorization: token }
      })

EditNote.jsx
const res = await axios.get(`/notes/${param.id}`, {
          headers: { Authorization: token }
        })
        
      await axios.put(
        `/notes/${id}`,
        { title, content, date },
        {
          headers: { Authorization: token },
        }
      );